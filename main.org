#+Title: Tarea 1
#+author: Dietrich Daroch
#+language: es

* Setup                                                            :ignore:
** org-mode                                                          :ignore:
   #+startup: overview
   #+seq_todo: TODO | REVIEW DONE

*** export options                                                   :ignore:
   # Use sub-sub-sub-section
   #+options: H:4
   # We have a custom title
   #+options: title:nil
   # We don't want a table of contents
   #+options: toc:nil
   # We don't numbered sections
   #+options: num:nil
   #+options: tasks:t
   #+options: tags:nil
   #+options: d:nil
   #+options: skip:nil ^:nil timestamp:nil

** LaTeX                                                             :ignore:
*** Latex header                                                     :ignore:
**** Document class                                                  :ignore:
     #+LATEX_CLASS: article
     #+LATEX_CLASS_OPTIONS: [a4paper]

**** Packages                                                        :ignore:
     #+LATEX_HEADER: \usepackage{fullpage}
     #+LATEX_HEADER: \usepackage[utf8]{inputenc}
     #+LATEX_HEADER: \usepackage[spanish]{babel}
     #+LATEX_HEADER: \usepackage{epsfig}
     #+LATEX_HEADER: \usepackage{amsmath}
     #+LATEX_HEADER: \usepackage{amssymb}
     #+LATEX_HEADER: \usepackage{epstopdf}
     #+LATEX_HEADER: \usepackage{algorithmic}
     #+LATEX_HEADER: \usepackage[nothing]{algorithm}

**** Code                                                            :ignore:
     #+LATEX_HEADER: \usepackage{minted}
     #+LATEX_HEADER: \setminted[python] {
     #+LATEX_HEADER:   linenos=false,
     #+LATEX_HEADER:   autogobble=true,
     #+LATEX_HEADER:   frame=lines,
     #+LATEX_HEADER:   framesep=2mm,
     #+LATEX_HEADER:   fontsize=\footnotesize
     #+LATEX_HEADER: }

*** Aliases                                                          :ignore:
    #+LATEX_HEADER: \newcommand{\astar}{$A^*$}

*** Other                                                            :ignore:
    # https://tex.stackexchange.com/questions/8351/what-do-makeatletter-and-makeatother-do
    #+LATEX_HEADER: \makeatletter
    #+LATEX_HEADER: \makeatother

** Title                                                             :ignore:
   #+LATEX: \begin{tabular}{ccl}
   #+LATEX: \begin{tabular}{c}
   #+LATEX: \includegraphics[width=2.5cm]{Figures/puc-logo.pdf}
   #+LATEX: \end{tabular}
   #+LATEX: &\ \ \ &
   #+LATEX: \begin{tabular}{l}
   #+LATEX: PONTIFICIA UNIVERSIDAD CATÓLICA DE CHILE\\
   #+LATEX: ESCUELA DE INGENIERÍA\\
   #+LATEX: DEPARTAMENTO DE CIENCIAS DE LA COMPUTACIÓN
   #+LATEX: \end{tabular}
   #+LATEX: \end{tabular}

   #+LATEX: \begin{center}
   #+LATEX: \bf IIC2613 - Inteligencia Artificial\\
   #+LATEX: \bf 2do semestre del 2021\\~\\

   #+LATEX: \vspace{0.4cm}

   #+LATEX: \bf {\Huge Tarea 1}
   #+LATEX: \end{center}

* Tasks                                                     :ignore:noexport:
** DONE Agregar código de honor
** DONE Implementar Sokoban
** DONE Forkear Search-py
*** DONE Agregar stub para A*
*** DONE Agregar stub para IDDFS

** DONE Agregar código de honor
** DONE Implementar Sokoban
** DONE Forkear Search-py
*** DONE Agregar stub para A*
*** DONE Agregar stub para IDDFS

* Instrucciones
** Entrega
   La tarea tiene plazo hasta el 26 de septiembre a las 23:59.
   Se recolectará el commit en el /default branch/ a la hora de entrega.

** Repositorio
   Ésta tarea usa ~git~. Usted trabajará individualmente en un /fork/ *privado*
   del [[https://github.com/IIC2613-Inteligencia-Artificial-2021-2/Search-py][repositorio de la tarea]] al que se le dará acceso mediante github.

   Su fork debe modificar el código y agregar un documento con las respuestas.
   Para las preguntas de implementación basta referenciar a su código.

   Las preguntas públicas respecto a la tarea deben ser hechas a través de
  [[https://github.com/IIC2613-Inteligencia-Artificial-2021-2/Syllabus/issues/new][ /issues/]] en github.

** Integridad

   Su repositorio debe permanecer privado y se espera que sigan el
  [[https://www.uc.cl/codigo-de-honor/][ Código de Honor]] de la escuela.

   Toda respuesta debe ser escrita por ti, individualmente.
   Esto significa que al momento de editar la respuesta, no debes copiar el
   material hecho por otra persona. Queremos tu comprensión y entendimiento de
   las cosas que estudies y aprendas. Por lo tanto, las definiciones y análisis
   que presentes deben venir de tu propio razonamiento.

   También es importante dejar claro que sabemos que estás utilizando material
   hecho por otras personas, y debes reconocerlo. Es por eso que te pediremos
   que cites tus fuentes en esta oportunidad. Tienes dos formas de citar. La
   primera es bastante indirecta, y solamente exige que menciones a tu fuente en
   tu bibliografı́a.
   Harás esto cuando hayas aprendido conceptos, los hayas interiorizado, y estés
   dando tu interpretación. La segunda es más directa, utilizarás las comillas
   “” para parafrasear algo que se le ocurrió a otra persona, seguido de un
   paréntesis con la referencia de dónde se encuentra dicho texto. Solamente
   debes parafrasear cuando quieres darle fuerza a un argumento, jamás para
   contestar algo que se te pregunte a ti, pues tal respuesta, si bien te evita
   el plagio, tampoco te da puntaje. Las citas de publicaciones cientı́ficas las
   puedes poner en cualquier formato de amplia aceptación como APA, ICONTEC e
   IEEE, por nombrar algunos.
   Las citas a sitios web las debes hacer referenciando el link del sitio, y la
   fecha de la que has tomado la referencia. Por favor, no cites a tus
   compañeros, aprende de ellos, sé crı́tico con sus opiniones, y entrega tu
   propio trabajo original.
   Esta misma regla también se cumple respecto del código que entregues.

\newpage
** Código
   Hay implementaciones parciales para ordenar su código detro del proyecto y
   también tests que se refieren a estas funciones parcialmente implementadas.
   Como parte de la implementación se espera que pasen los tests deshabilitados.

   #+caption: Un test deshabilitado. Borrar la línea del /decorator/ de pytest lo habilita.
   #+begin_src python
     @pytest.mark.skip(reason="TODO: Implement as part of the assignment.")
     def test_numbers():
         assert 0 <= 1, "This holds, right?"
   #+end_src

*** Tests
    Puede ejecutar los tests con [[https://pytest.org][~pytest~]]. Note que hay test ignorados marcados
    con una ~s~ (/skipped/) que eventualmente deberían habilitarse y pasar.

*** Formato
    El proyecto usa [[https://black.readthedocs.io/][~black~]] para evitar tener que tomar decisiones de formato.
    Se espera que cada commit pase los checks de ~black .~. De lo contrario se
    descontarán 0.5 puntos.

*** ~git~ hooks
    Se recomienda habilitar ~pre-commit~ hooks con tal de evitar romper tests
    o el formato accidentalmente.

\newpage

* Búsqueda
** Problemas
*** 15-puzzle
    El [[https://en.wikipedia.org/wiki/15_puzzle][Puzzle de 15]] fue mencionado en varias ocaciones ya que es bastante
    sencillo obtener buenas heurísticas.

    - [0.2] Implemente la heurística mencionada en clases de la suma de las
      distancias de Manhattan entre las losetas (/tiles/) y su posición final.
    - [0.1] ?`Es esta heurística admisible? Justifique
    - [0.3] ?`Es esta heurística consistente? Justifique

*** Sokoban
    El [[https://en.wikipedia.org/wiki/Sokoban][Sokoban]] es un puzzle en que un agente debe ordenar una bodega y ubicar
    cajas en algunas posiciones específicas.

    En clases y ayudantías mencionamos que una buena heurística es la de
    sumar las distancias de Manhattan entre cada caja y su objetivo más cercano.
    - [0.2] Implemente esta heurística.
    - [0.3] Notando que el agente tiene que acercarse a las cajas es fácil notar
      que falta contar acciones. Implemente esta versión mejorada de la
      heurística.
    - [0.7] Implemente una heurística estrictamente mejor que las anteriores.
      - ?`Por qué su heurística es mejor?
      - Agregue un test mostrando un estado en que:
        - Su heurística sea mejor.
        - Su heurística sea admisible. Use BFS para verificar el costo óptimo.

*** Sudoku
    El [[https://en.wikipedia.org/wiki/Sudoku][Sudoku]] es un juego bastante popular en que hay que llenar un tablero
    sin repetir dígitos en columnas, filas y bloques.

    - Pese a que para este puzzle conocemos $h^*$, usar \astar no es ideal.
      - [0.2] ?`Cómo se comportan BFS y DFS? ?`Cuál encuentra soluciones antes?
      - [0.5] ?`Por qué \astar no es ideal para resolver sudokus?
      - [0.3] ?`Cómo se comporta \astar con $h^*$ en este puzzle de costos uniformes?

\newpage
** Algoritmos
*** ID-DFS
    Los problemas más graves de DFS son que no es completo para grafos
    infinitos, y aún más lamentable, que no es óptimo ni si quiera en grafos
    finitos.

    Iterative deepening DFS soluciona ambos problemas al imponer límites
    incrementales de profundidad.

    - [0.3] Implemente ID-DFS y logre pasar los tests de optimalidad.

*** \astar
**** [0.8] Implemente \astar
     Consulte la implementación de Dijkstra y de Greedy search para
     familiarizarse con el /intrusive heap/ de Open y el uso de heurísticas.

**** Desempates
     Una implementación ingenua de \astar simplemente escoge nodos por mejor
     valor $f$, pero en muchos problemas el valor de $f$ es bastante uniforme y
     no se logra rankear nodos efectivamente.

     - [0.2] Implemente desempates optimistas usando mayor $g$ o menor $h$.

* Búsqueda con Adversario
** Algoritmos híbridos
   Suponga que tiene implementaciones de,
   - Poda alfa-beta con,
     - Ranking de acciones
     - Estimación de estados
     - Estimación de a qué profundidad cortar junto con un límite fijo.
   - Monte-Carlo tree search (MTCS) con,
     - Estimación de a qué profundidad cortar junto con un límite fijo.

   Al crear un algoritmo híbrido tenemos la opción de correr primero poda
   alfa-beta y luego cambiar a MTCS, o viceversa.

   - [0.2] ?`Qué orden de algoritmos usaría? Justifique.

** Búsqueda con Adversario
*** Algoritmos
    Suponga que hay un árbol de juego con $b$ ramas por nivel y una profundidad
    $d$.
    - [0.1] ?`Cuántos nodos exploraría minimax?
    - [0.1] ?`Cuántos nodos exploraría poda alfa-beta en el peor caso?
    - [0.5] ?`Cuántos nodos exploraría poda alfa-beta en el mejor caso?

*** Multijugador
   - Suponga que hay un juego determinista y conocimiento perfecto en que se
     compite por obtener puntaje de un pool finito, pero que se juegue de a 3
     o más jugadores.
     - [0.2] ?`Qué problemas hay al tratar de usar minimax y poda alfa-beta?
     - [0.6] ?`Cómo podemos adaptar poda alfa-beta para resolver el problema con
       $N$ jugadores?
     - [0.2] ?`Cómo podemos adaptar Monte-Carlo Tree Search?
